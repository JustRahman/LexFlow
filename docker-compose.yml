services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: lexflow-postgres
    environment:
      POSTGRES_USER: lexflow
      POSTGRES_PASSWORD: lexflow_dev_password
      POSTGRES_DB: lexflow_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lexflow"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: lexflow-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: lexflow-backend
    ports:
      - "8000:8000"
    environment:
      # DATABASE_URL: postgresql+asyncpg://lexflow:lexflow_dev_password@postgres:5432/lexflow_dev
      # Commented out to use DATABASE_URL from .env file (Supabase)
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
    env_file:
      - ./backend/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: lexflow-celery
    environment:
      # DATABASE_URL: postgresql+asyncpg://lexflow:lexflow_dev_password@postgres:5432/lexflow_dev
      # Commented out to use DATABASE_URL from .env file (Supabase)
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
    env_file:
      - ./backend/.env
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app
    command: celery -A app.worker worker --loglevel=info

  # Next.js Frontend
  frontend:
    image: node:20-alpine
    container_name: lexflow-frontend
    working_dir: /app
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
    env_file:
      - ./frontend/.env.local
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    command: sh -c "npm install && npm run dev"

volumes:
  postgres_data:
  redis_data:
